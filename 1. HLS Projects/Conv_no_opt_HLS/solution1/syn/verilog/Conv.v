// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv,hls_ip_2018_3_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.334000,HLS_SYN_LAT=1172,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=14,HLS_SYN_FF=1864,HLS_SYN_LUT=2097,HLS_VERSION=2018_3_1}" *)

module Conv (
        ap_clk,
        ap_rst_n,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        data_in_TLAST,
        data_out_TDATA,
        data_out_TVALID,
        data_out_TREADY,
        data_out_TLAST
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst_n;
input  [63:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
input  [0:0] data_in_TLAST;
output  [63:0] data_out_TDATA;
output   data_out_TVALID;
input   data_out_TREADY;
output  [0:0] data_out_TLAST;

 reg    ap_rst_n_inv;
reg   [63:0] data_in_V_data_0_data_out;
wire    data_in_V_data_0_vld_in;
wire    data_in_V_data_0_vld_out;
wire    data_in_V_data_0_ack_in;
reg    data_in_V_data_0_ack_out;
reg   [63:0] data_in_V_data_0_payload_A;
reg   [63:0] data_in_V_data_0_payload_B;
reg    data_in_V_data_0_sel_rd;
reg    data_in_V_data_0_sel_wr;
wire    data_in_V_data_0_sel;
wire    data_in_V_data_0_load_A;
wire    data_in_V_data_0_load_B;
reg   [1:0] data_in_V_data_0_state;
wire    data_in_V_data_0_state_cmp_full;
wire    data_in_V_last_V_0_vld_in;
reg    data_in_V_last_V_0_ack_out;
reg   [1:0] data_in_V_last_V_0_state;
reg   [63:0] data_out_V_data_1_data_out;
reg    data_out_V_data_1_vld_in;
wire    data_out_V_data_1_vld_out;
wire    data_out_V_data_1_ack_in;
wire    data_out_V_data_1_ack_out;
reg   [63:0] data_out_V_data_1_payload_A;
reg   [63:0] data_out_V_data_1_payload_B;
reg    data_out_V_data_1_sel_rd;
reg    data_out_V_data_1_sel_wr;
wire    data_out_V_data_1_sel;
wire    data_out_V_data_1_load_A;
wire    data_out_V_data_1_load_B;
reg   [1:0] data_out_V_data_1_state;
wire    data_out_V_data_1_state_cmp_full;
reg   [0:0] data_out_V_last_V_1_data_out;
reg    data_out_V_last_V_1_vld_in;
wire    data_out_V_last_V_1_vld_out;
wire    data_out_V_last_V_1_ack_in;
wire    data_out_V_last_V_1_ack_out;
reg   [0:0] data_out_V_last_V_1_payload_A;
reg   [0:0] data_out_V_last_V_1_payload_B;
reg    data_out_V_last_V_1_sel_rd;
reg    data_out_V_last_V_1_sel_wr;
wire    data_out_V_last_V_1_sel;
wire    data_out_V_last_V_1_load_A;
wire    data_out_V_last_V_1_load_B;
reg   [1:0] data_out_V_last_V_1_state;
wire    data_out_V_last_V_1_state_cmp_full;
reg    data_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_440_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond4_fu_500_p2;
reg    data_out_TDATA_blk_n;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire   [1:0] i_5_fu_412_p2;
reg   [1:0] i_5_reg_943;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_1_fu_434_p2;
reg   [4:0] tmp_1_reg_948;
wire   [0:0] exitcond1_fu_406_p2;
wire   [1:0] j_5_fu_446_p2;
reg    ap_block_state3;
wire   [1:0] i_6_fu_472_p2;
reg   [1:0] i_6_reg_964;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_5_fu_494_p2;
reg   [4:0] tmp_5_reg_969;
wire   [0:0] exitcond2_fu_466_p2;
wire   [1:0] j_6_fu_506_p2;
reg    ap_block_state5;
wire   [2:0] indvarinc_fu_526_p2;
reg   [2:0] indvarinc_reg_982;
wire    ap_CS_fsm_state6;
wire   [5:0] tmp_7_fu_548_p2;
reg   [5:0] tmp_7_reg_987;
wire   [2:0] indvarinc1_fu_554_p2;
wire    ap_CS_fsm_state7;
wire   [1:0] i_7_fu_592_p2;
reg   [1:0] i_7_reg_1006;
wire    ap_CS_fsm_state8;
wire   [4:0] tmp_21_fu_614_p2;
reg   [4:0] tmp_21_reg_1011;
wire   [0:0] exitcond5_fu_586_p2;
wire   [4:0] tmp_25_fu_636_p2;
reg   [4:0] tmp_25_reg_1016;
wire   [1:0] j_7_fu_648_p2;
reg   [1:0] j_7_reg_1024;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond7_fu_642_p2;
wire   [4:0] tmp_31_fu_672_p2;
reg   [4:0] tmp_31_reg_1034;
wire   [2:0] i_3_cast_fu_681_p1;
reg   [2:0] i_3_cast_reg_1039;
wire    ap_CS_fsm_state11;
wire   [1:0] i_8_fu_691_p2;
reg   [1:0] i_8_reg_1047;
wire   [4:0] tmp_10_fu_713_p2;
reg   [4:0] tmp_10_reg_1052;
wire   [0:0] exitcond6_fu_685_p2;
wire   [2:0] j_3_cast_fu_719_p1;
reg   [2:0] j_3_cast_reg_1057;
wire    ap_CS_fsm_state12;
wire   [1:0] j_9_fu_729_p2;
reg   [1:0] j_9_reg_1065;
reg   [3:0] p_addr_reg_1070;
wire   [0:0] exitcond9_fu_723_p2;
wire   [1:0] m_1_fu_759_p2;
reg   [1:0] m_1_reg_1078;
wire    ap_CS_fsm_state13;
wire   [5:0] tmp_33_fu_786_p2;
reg   [5:0] tmp_33_reg_1083;
wire   [0:0] exitcond10_fu_753_p2;
wire   [4:0] tmp_35_fu_808_p2;
reg   [4:0] tmp_35_reg_1088;
wire   [1:0] n_1_fu_824_p2;
reg   [1:0] n_1_reg_1096;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond11_fu_818_p2;
wire   [63:0] padded_image_q0;
reg   [63:0] padded_image_load_reg_1111;
wire    ap_CS_fsm_state15;
wire   [63:0] kernal_mat_q0;
reg   [63:0] kernal_mat_load_reg_1116;
wire   [63:0] grp_fu_396_p2;
reg   [63:0] tmp_27_reg_1121;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_390_p2;
wire    ap_CS_fsm_state25;
wire   [1:0] i_9_fu_869_p2;
reg   [1:0] i_9_reg_1134;
wire    ap_CS_fsm_state26;
reg    ap_block_state26;
wire   [4:0] tmp_14_fu_891_p2;
reg   [4:0] tmp_14_reg_1139;
wire   [0:0] exitcond8_fu_863_p2;
wire   [0:0] tmp_15_fu_897_p2;
reg   [0:0] tmp_15_reg_1144;
wire   [1:0] j_8_fu_909_p2;
reg   [1:0] j_8_reg_1152;
wire    ap_CS_fsm_state27;
wire   [0:0] exitcond_fu_903_p2;
wire   [0:0] tmp_last_V_fu_935_p2;
reg   [0:0] tmp_last_V_reg_1162;
wire   [63:0] empty_q0;
reg   [3:0] input_mat_address0;
reg    input_mat_ce0;
reg    input_mat_we0;
wire   [63:0] input_mat_q0;
reg   [3:0] kernal_mat_address0;
reg    kernal_mat_ce0;
reg    kernal_mat_we0;
reg   [4:0] padded_image_address0;
reg    padded_image_ce0;
reg    padded_image_we0;
reg   [63:0] padded_image_d0;
reg   [3:0] empty_address0;
reg    empty_ce0;
reg    empty_we0;
reg   [63:0] empty_d0;
reg   [1:0] i_reg_211;
wire    ap_CS_fsm_state1;
reg   [1:0] j_reg_222;
reg   [1:0] i_1_reg_233;
reg   [1:0] j_1_reg_244;
reg   [2:0] invdar_reg_255;
wire   [0:0] tmp_8_fu_574_p2;
wire   [0:0] tmp_2_fu_580_p2;
reg   [2:0] invdar1_reg_267;
reg   [1:0] i_2_reg_278;
reg   [1:0] j_2_reg_289;
wire    ap_CS_fsm_state10;
reg   [1:0] i_3_reg_300;
reg   [1:0] j_3_reg_311;
reg   [63:0] tmp_17_reg_322;
reg   [1:0] m_reg_334;
reg   [63:0] tmp_23_reg_345;
reg   [1:0] n_reg_357;
reg   [1:0] i_4_reg_368;
reg   [1:0] j_4_reg_379;
wire  signed [63:0] tmp_35_cast_fu_461_p1;
wire  signed [63:0] tmp_39_cast_fu_521_p1;
wire   [63:0] tmp_38_cast_fu_569_p1;
wire  signed [63:0] tmp_44_cast_fu_663_p1;
wire   [63:0] tmp_45_cast_fu_677_p1;
wire  signed [63:0] p_sum1_cast_fu_744_p1;
wire   [63:0] tmp_50_cast_fu_844_p1;
wire  signed [63:0] tmp_51_cast_fu_858_p1;
wire  signed [63:0] p_sum_cast_fu_924_p1;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state16;
wire   [3:0] tmp_s_fu_422_p3;
wire   [4:0] p_shl2_cast_fu_430_p1;
wire   [4:0] tmp_cast_fu_418_p1;
wire   [4:0] tmp_4_cast_fu_452_p1;
wire   [4:0] tmp_6_fu_456_p2;
wire   [3:0] tmp_4_fu_482_p3;
wire   [4:0] p_shl3_cast_fu_490_p1;
wire   [4:0] tmp_1_cast_fu_478_p1;
wire   [4:0] tmp_cast_17_fu_512_p1;
wire   [4:0] tmp_12_fu_516_p2;
wire   [4:0] tmp_fu_536_p3;
wire   [5:0] p_shl4_cast_fu_544_p1;
wire   [5:0] tmp_6_cast_fu_532_p1;
wire   [5:0] tmp_7_cast_fu_560_p1;
wire   [5:0] tmp_11_fu_564_p2;
wire   [3:0] tmp_13_fu_602_p3;
wire   [4:0] p_shl6_cast_fu_610_p1;
wire   [4:0] tmp_3_cast_fu_598_p1;
wire   [3:0] tmp_22_fu_624_p3;
wire   [4:0] tmp_5_cast_fu_620_p1;
wire   [4:0] p_shl5_cast_fu_632_p1;
wire   [4:0] tmp_11_cast_fu_654_p1;
wire   [4:0] tmp_26_fu_658_p2;
wire   [4:0] tmp_12_cast_fu_668_p1;
wire   [3:0] p_shl_fu_701_p3;
wire   [4:0] p_shl_cast_fu_709_p1;
wire   [4:0] tmp_9_cast7_fu_697_p1;
wire   [4:0] tmp_16_cast_fu_735_p1;
wire   [4:0] p_sum1_fu_739_p2;
wire   [2:0] m_cast_fu_749_p1;
wire   [2:0] tmp_20_fu_765_p2;
wire   [4:0] tmp_32_fu_774_p3;
wire   [5:0] tmp_21_cast_fu_770_p1;
wire   [5:0] p_shl8_cast_fu_782_p1;
wire   [3:0] tmp_34_fu_796_p3;
wire   [4:0] p_shl7_cast_fu_804_p1;
wire   [4:0] tmp_22_cast_fu_792_p1;
wire   [2:0] n_cast_fu_814_p1;
wire   [2:0] tmp_24_fu_830_p2;
wire   [5:0] tmp_25_cast_fu_835_p1;
wire   [5:0] tmp_36_fu_839_p2;
wire   [4:0] tmp_26_cast_fu_849_p1;
wire   [4:0] tmp_37_fu_853_p2;
wire   [3:0] p_shl1_fu_879_p3;
wire   [4:0] p_shl1_cast_fu_887_p1;
wire   [4:0] tmp_13_cast2_fu_875_p1;
wire   [4:0] tmp_18_cast_fu_915_p1;
wire   [4:0] p_sum_fu_919_p2;
wire   [0:0] tmp_19_fu_929_p2;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 data_in_V_data_0_sel_rd = 1'b0;
#0 data_in_V_data_0_sel_wr = 1'b0;
#0 data_in_V_data_0_state = 2'd0;
#0 data_in_V_last_V_0_state = 2'd0;
#0 data_out_V_data_1_sel_rd = 1'b0;
#0 data_out_V_data_1_sel_wr = 1'b0;
#0 data_out_V_data_1_state = 2'd0;
#0 data_out_V_last_V_1_sel_rd = 1'b0;
#0 data_out_V_last_V_1_sel_wr = 1'b0;
#0 data_out_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 29'd1;
end

Conv_input_mat #(
    .DataWidth( 64 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
input_mat_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_mat_address0),
    .ce0(input_mat_ce0),
    .we0(input_mat_we0),
    .d0(data_in_V_data_0_data_out),
    .q0(input_mat_q0)
);

Conv_input_mat #(
    .DataWidth( 64 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernal_mat_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernal_mat_address0),
    .ce0(kernal_mat_ce0),
    .we0(kernal_mat_we0),
    .d0(data_in_V_data_0_data_out),
    .q0(kernal_mat_q0)
);

Conv_padded_image #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
padded_image_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(padded_image_address0),
    .ce0(padded_image_ce0),
    .we0(padded_image_we0),
    .d0(padded_image_d0),
    .q0(padded_image_q0)
);

Conv_input_mat #(
    .DataWidth( 64 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
empty_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(empty_address0),
    .ce0(empty_ce0),
    .we0(empty_we0),
    .d0(empty_d0),
    .q0(empty_q0)
);

Conv_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Conv_dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_23_reg_345),
    .din1(tmp_27_reg_1121),
    .ce(1'b1),
    .dout(grp_fu_390_p2)
);

Conv_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Conv_dmul_64ns_64ns_64_5_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(padded_image_load_reg_1111),
    .din1(kernal_mat_load_reg_1116),
    .ce(1'b1),
    .dout(grp_fu_396_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((data_in_V_data_0_ack_out == 1'b1) & (data_in_V_data_0_vld_out == 1'b1))) begin
            data_in_V_data_0_sel_rd <= ~data_in_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((data_in_V_data_0_ack_in == 1'b1) & (data_in_V_data_0_vld_in == 1'b1))) begin
            data_in_V_data_0_sel_wr <= ~data_in_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_0_state <= 2'd0;
    end else begin
        if ((((data_in_V_data_0_state == 2'd2) & (data_in_V_data_0_vld_in == 1'b0)) | ((data_in_V_data_0_state == 2'd3) & (data_in_V_data_0_vld_in == 1'b0) & (data_in_V_data_0_ack_out == 1'b1)))) begin
            data_in_V_data_0_state <= 2'd2;
        end else if ((((data_in_V_data_0_state == 2'd1) & (data_in_V_data_0_ack_out == 1'b0)) | ((data_in_V_data_0_state == 2'd3) & (data_in_V_data_0_ack_out == 1'b0) & (data_in_V_data_0_vld_in == 1'b1)))) begin
            data_in_V_data_0_state <= 2'd1;
        end else if (((~((data_in_V_data_0_vld_in == 1'b0) & (data_in_V_data_0_ack_out == 1'b1)) & ~((data_in_V_data_0_ack_out == 1'b0) & (data_in_V_data_0_vld_in == 1'b1)) & (data_in_V_data_0_state == 2'd3)) | ((data_in_V_data_0_state == 2'd1) & (data_in_V_data_0_ack_out == 1'b1)) | ((data_in_V_data_0_state == 2'd2) & (data_in_V_data_0_vld_in == 1'b1)))) begin
            data_in_V_data_0_state <= 2'd3;
        end else begin
            data_in_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((data_in_V_last_V_0_state == 2'd2) & (data_in_V_last_V_0_vld_in == 1'b0)) | ((data_in_V_last_V_0_state == 2'd3) & (data_in_V_last_V_0_vld_in == 1'b0) & (data_in_V_last_V_0_ack_out == 1'b1)))) begin
            data_in_V_last_V_0_state <= 2'd2;
        end else if ((((data_in_V_last_V_0_state == 2'd1) & (data_in_V_last_V_0_ack_out == 1'b0)) | ((data_in_V_last_V_0_state == 2'd3) & (data_in_V_last_V_0_ack_out == 1'b0) & (data_in_V_last_V_0_vld_in == 1'b1)))) begin
            data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((data_in_V_last_V_0_vld_in == 1'b0) & (data_in_V_last_V_0_ack_out == 1'b1)) & ~((data_in_V_last_V_0_ack_out == 1'b0) & (data_in_V_last_V_0_vld_in == 1'b1)) & (data_in_V_last_V_0_state == 2'd3)) | ((data_in_V_last_V_0_state == 2'd1) & (data_in_V_last_V_0_ack_out == 1'b1)) | ((data_in_V_last_V_0_state == 2'd2) & (data_in_V_last_V_0_vld_in == 1'b1)))) begin
            data_in_V_last_V_0_state <= 2'd3;
        end else begin
            data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_data_1_ack_out == 1'b1) & (data_out_V_data_1_vld_out == 1'b1))) begin
            data_out_V_data_1_sel_rd <= ~data_out_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_data_1_ack_in == 1'b1) & (data_out_V_data_1_vld_in == 1'b1))) begin
            data_out_V_data_1_sel_wr <= ~data_out_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_data_1_state == 2'd2) & (data_out_V_data_1_vld_in == 1'b0)) | ((data_out_V_data_1_state == 2'd3) & (data_out_V_data_1_vld_in == 1'b0) & (data_out_V_data_1_ack_out == 1'b1)))) begin
            data_out_V_data_1_state <= 2'd2;
        end else if ((((data_out_V_data_1_state == 2'd1) & (data_out_V_data_1_ack_out == 1'b0)) | ((data_out_V_data_1_state == 2'd3) & (data_out_V_data_1_ack_out == 1'b0) & (data_out_V_data_1_vld_in == 1'b1)))) begin
            data_out_V_data_1_state <= 2'd1;
        end else if (((~((data_out_V_data_1_vld_in == 1'b0) & (data_out_V_data_1_ack_out == 1'b1)) & ~((data_out_V_data_1_ack_out == 1'b0) & (data_out_V_data_1_vld_in == 1'b1)) & (data_out_V_data_1_state == 2'd3)) | ((data_out_V_data_1_state == 2'd1) & (data_out_V_data_1_ack_out == 1'b1)) | ((data_out_V_data_1_state == 2'd2) & (data_out_V_data_1_vld_in == 1'b1)))) begin
            data_out_V_data_1_state <= 2'd3;
        end else begin
            data_out_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_last_V_1_ack_out == 1'b1) & (data_out_V_last_V_1_vld_out == 1'b1))) begin
            data_out_V_last_V_1_sel_rd <= ~data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_last_V_1_ack_in == 1'b1) & (data_out_V_last_V_1_vld_in == 1'b1))) begin
            data_out_V_last_V_1_sel_wr <= ~data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_last_V_1_state == 2'd2) & (data_out_V_last_V_1_vld_in == 1'b0)) | ((data_out_V_last_V_1_state == 2'd3) & (data_out_V_last_V_1_vld_in == 1'b0) & (data_out_V_last_V_1_ack_out == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd2;
        end else if ((((data_out_V_last_V_1_state == 2'd1) & (data_out_V_last_V_1_ack_out == 1'b0)) | ((data_out_V_last_V_1_state == 2'd3) & (data_out_V_last_V_1_ack_out == 1'b0) & (data_out_V_last_V_1_vld_in == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((data_out_V_last_V_1_vld_in == 1'b0) & (data_out_V_last_V_1_ack_out == 1'b1)) & ~((data_out_V_last_V_1_ack_out == 1'b0) & (data_out_V_last_V_1_vld_in == 1'b1)) & (data_out_V_last_V_1_state == 2'd3)) | ((data_out_V_last_V_1_state == 2'd1) & (data_out_V_last_V_1_ack_out == 1'b1)) | ((data_out_V_last_V_1_state == 2'd2) & (data_out_V_last_V_1_vld_in == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd3;
        end else begin
            data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_233 <= 2'd0;
    end else if ((~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond4_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_233 <= i_6_reg_964;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_580_p2 == 1'd1) & (tmp_8_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_278 <= 2'd0;
    end else if (((exitcond7_fu_642_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_reg_278 <= i_7_reg_1006;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_586_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_3_reg_300 <= 2'd0;
    end else if (((exitcond9_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_3_reg_300 <= i_8_reg_1047;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_685_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_4_reg_368 <= 2'd0;
    end else if (((exitcond_fu_903_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        i_4_reg_368 <= i_9_reg_1134;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond3_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_211 <= i_5_reg_943;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_211 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        invdar1_reg_267 <= indvarinc1_fu_554_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        invdar1_reg_267 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        invdar_reg_255 <= 3'd0;
    end else if (((tmp_8_fu_574_p2 == 1'd1) & (tmp_2_fu_580_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        invdar_reg_255 <= indvarinc_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_reg_244 <= j_6_fu_506_p2;
    end else if (((exitcond2_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_1_reg_244 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_586_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_2_reg_289 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_2_reg_289 <= j_7_reg_1024;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond10_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        j_3_reg_311 <= j_9_reg_1065;
    end else if (((exitcond6_fu_685_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        j_3_reg_311 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (data_out_V_data_1_ack_in == 1'b1))) begin
        j_4_reg_379 <= j_8_reg_1152;
    end else if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_1_ack_in == 1'b0)) & (exitcond8_fu_863_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        j_4_reg_379 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond3_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_222 <= j_5_fu_446_p2;
    end else if (((exitcond1_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_222 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_fu_818_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        m_reg_334 <= m_1_reg_1078;
    end else if (((exitcond9_fu_723_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        m_reg_334 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        n_reg_357 <= n_1_reg_1096;
    end else if (((exitcond10_fu_753_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        n_reg_357 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_fu_818_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_17_reg_322 <= tmp_23_reg_345;
    end else if (((exitcond9_fu_723_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_17_reg_322 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_23_reg_345 <= grp_fu_390_p2;
    end else if (((exitcond10_fu_753_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_23_reg_345 <= tmp_17_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_data_0_load_A == 1'b1)) begin
        data_in_V_data_0_payload_A <= data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_data_0_load_B == 1'b1)) begin
        data_in_V_data_0_payload_B <= data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_data_1_load_A == 1'b1)) begin
        data_out_V_data_1_payload_A <= empty_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_data_1_load_B == 1'b1)) begin
        data_out_V_data_1_payload_B <= empty_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_last_V_1_load_A == 1'b1)) begin
        data_out_V_last_V_1_payload_A <= tmp_last_V_reg_1162;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_last_V_1_load_B == 1'b1)) begin
        data_out_V_last_V_1_payload_B <= tmp_last_V_reg_1162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_cast_reg_1039[1 : 0] <= i_3_cast_fu_681_p1[1 : 0];
        i_8_reg_1047 <= i_8_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_5_reg_943 <= i_5_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_6_reg_964 <= i_6_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_7_reg_1006 <= i_7_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        i_9_reg_1134 <= i_9_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvarinc_reg_982 <= indvarinc_fu_526_p2;
        tmp_7_reg_987 <= tmp_7_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_3_cast_reg_1057[1 : 0] <= j_3_cast_fu_719_p1[1 : 0];
        j_9_reg_1065 <= j_9_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_7_reg_1024 <= j_7_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        j_8_reg_1152 <= j_8_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        kernal_mat_load_reg_1116 <= kernal_mat_q0;
        padded_image_load_reg_1111 <= padded_image_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        m_1_reg_1078 <= m_1_fu_759_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        n_1_reg_1096 <= n_1_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_723_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        p_addr_reg_1070 <= p_sum1_cast_fu_744_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_685_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_10_reg_1052 <= tmp_10_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_1_ack_in == 1'b0)) & (exitcond8_fu_863_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        tmp_14_reg_1139 <= tmp_14_fu_891_p2;
        tmp_15_reg_1144 <= tmp_15_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_948 <= tmp_1_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_586_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_21_reg_1011 <= tmp_21_fu_614_p2;
        tmp_25_reg_1016 <= tmp_25_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_27_reg_1121 <= grp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_31_reg_1034 <= tmp_31_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond10_fu_753_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_33_reg_1083 <= tmp_33_fu_786_p2;
        tmp_35_reg_1088 <= tmp_35_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_5_reg_969 <= tmp_5_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_903_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        tmp_last_V_reg_1162 <= tmp_last_V_fu_935_p2;
    end
end

always @ (*) begin
    if ((((exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((exitcond3_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_in_TDATA_blk_n = data_in_V_data_0_state[1'd0];
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | (~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond3_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_in_V_data_0_ack_out = 1'b1;
    end else begin
        data_in_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((data_in_V_data_0_sel == 1'b1)) begin
        data_in_V_data_0_data_out = data_in_V_data_0_payload_B;
    end else begin
        data_in_V_data_0_data_out = data_in_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | (~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond3_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28))) begin
        data_out_TDATA_blk_n = data_out_V_data_1_state[1'd1];
    end else begin
        data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((data_out_V_data_1_sel == 1'b1)) begin
        data_out_V_data_1_data_out = data_out_V_data_1_payload_B;
    end else begin
        data_out_V_data_1_data_out = data_out_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (data_out_V_data_1_ack_in == 1'b1))) begin
        data_out_V_data_1_vld_in = 1'b1;
    end else begin
        data_out_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((data_out_V_last_V_1_sel == 1'b1)) begin
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_B;
    end else begin
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (data_out_V_data_1_ack_in == 1'b1))) begin
        data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        empty_address0 = p_sum_cast_fu_924_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        empty_address0 = p_addr_reg_1070;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_address0 = p_sum1_cast_fu_744_p1;
    end else begin
        empty_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state12))) begin
        empty_ce0 = 1'b1;
    end else begin
        empty_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        empty_d0 = grp_fu_390_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_d0 = 64'd0;
    end else begin
        empty_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((exitcond9_fu_723_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        empty_we0 = 1'b1;
    end else begin
        empty_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_mat_address0 = tmp_44_cast_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_mat_address0 = tmp_35_cast_fu_461_p1;
    end else begin
        input_mat_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        input_mat_ce0 = 1'b1;
    end else begin
        input_mat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond3_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_mat_we0 = 1'b1;
    end else begin
        input_mat_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        kernal_mat_address0 = tmp_51_cast_fu_858_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernal_mat_address0 = tmp_39_cast_fu_521_p1;
    end else begin
        kernal_mat_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        kernal_mat_ce0 = 1'b1;
    end else begin
        kernal_mat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        kernal_mat_we0 = 1'b1;
    end else begin
        kernal_mat_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        padded_image_address0 = tmp_50_cast_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        padded_image_address0 = tmp_45_cast_fu_677_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        padded_image_address0 = tmp_38_cast_fu_569_p1;
    end else begin
        padded_image_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7))) begin
        padded_image_ce0 = 1'b1;
    end else begin
        padded_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        padded_image_d0 = input_mat_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        padded_image_d0 = 64'd0;
    end else begin
        padded_image_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        padded_image_we0 = 1'b1;
    end else begin
        padded_image_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond3_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond3_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond4_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0)) & (exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_2_fu_580_p2 == 1'd1) & (tmp_8_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((tmp_8_fu_574_p2 == 1'd1) & (tmp_2_fu_580_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond5_fu_586_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond7_fu_642_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond6_fu_685_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((exitcond9_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond10_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond11_fu_818_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state26 : begin
            if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_1_ack_in == 1'b0)) & (exitcond8_fu_863_p2 == 1'd1) & (data_out_V_last_V_1_state[1'd0] == 1'b0) & (data_out_V_data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_1_ack_in == 1'b0)) & (exitcond8_fu_863_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((exitcond_fu_903_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (data_out_V_data_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (data_out_V_data_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state26 = ((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((exitcond3_fu_440_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((exitcond4_fu_500_p2 == 1'd0) & (data_in_V_data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_in_TREADY = data_in_V_last_V_0_state[1'd1];

assign data_in_V_data_0_ack_in = data_in_V_data_0_state[1'd1];

assign data_in_V_data_0_load_A = (~data_in_V_data_0_sel_wr & data_in_V_data_0_state_cmp_full);

assign data_in_V_data_0_load_B = (data_in_V_data_0_state_cmp_full & data_in_V_data_0_sel_wr);

assign data_in_V_data_0_sel = data_in_V_data_0_sel_rd;

assign data_in_V_data_0_state_cmp_full = ((data_in_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign data_in_V_data_0_vld_in = data_in_TVALID;

assign data_in_V_data_0_vld_out = data_in_V_data_0_state[1'd0];

assign data_in_V_last_V_0_vld_in = data_in_TVALID;

assign data_out_TDATA = data_out_V_data_1_data_out;

assign data_out_TLAST = data_out_V_last_V_1_data_out;

assign data_out_TVALID = data_out_V_last_V_1_state[1'd0];

assign data_out_V_data_1_ack_in = data_out_V_data_1_state[1'd1];

assign data_out_V_data_1_ack_out = data_out_TREADY;

assign data_out_V_data_1_load_A = (~data_out_V_data_1_sel_wr & data_out_V_data_1_state_cmp_full);

assign data_out_V_data_1_load_B = (data_out_V_data_1_state_cmp_full & data_out_V_data_1_sel_wr);

assign data_out_V_data_1_sel = data_out_V_data_1_sel_rd;

assign data_out_V_data_1_state_cmp_full = ((data_out_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_data_1_vld_out = data_out_V_data_1_state[1'd0];

assign data_out_V_last_V_1_ack_in = data_out_V_last_V_1_state[1'd1];

assign data_out_V_last_V_1_ack_out = data_out_TREADY;

assign data_out_V_last_V_1_load_A = (~data_out_V_last_V_1_sel_wr & data_out_V_last_V_1_state_cmp_full);

assign data_out_V_last_V_1_load_B = (data_out_V_last_V_1_state_cmp_full & data_out_V_last_V_1_sel_wr);

assign data_out_V_last_V_1_sel = data_out_V_last_V_1_sel_rd;

assign data_out_V_last_V_1_state_cmp_full = ((data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_last_V_1_vld_out = data_out_V_last_V_1_state[1'd0];

assign exitcond10_fu_753_p2 = ((m_reg_334 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond11_fu_818_p2 = ((n_reg_357 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond1_fu_406_p2 = ((i_reg_211 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_466_p2 = ((i_1_reg_233 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_440_p2 = ((j_reg_222 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_500_p2 = ((j_1_reg_244 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond5_fu_586_p2 = ((i_2_reg_278 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond6_fu_685_p2 = ((i_3_reg_300 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond7_fu_642_p2 = ((j_2_reg_289 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond8_fu_863_p2 = ((i_4_reg_368 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond9_fu_723_p2 = ((j_3_reg_311 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_903_p2 = ((j_4_reg_379 == 2'd3) ? 1'b1 : 1'b0);

assign i_3_cast_fu_681_p1 = i_3_reg_300;

assign i_5_fu_412_p2 = (i_reg_211 + 2'd1);

assign i_6_fu_472_p2 = (i_1_reg_233 + 2'd1);

assign i_7_fu_592_p2 = (i_2_reg_278 + 2'd1);

assign i_8_fu_691_p2 = (i_3_reg_300 + 2'd1);

assign i_9_fu_869_p2 = (i_4_reg_368 + 2'd1);

assign indvarinc1_fu_554_p2 = (invdar1_reg_267 + 3'd1);

assign indvarinc_fu_526_p2 = (invdar_reg_255 + 3'd1);

assign j_3_cast_fu_719_p1 = j_3_reg_311;

assign j_5_fu_446_p2 = (j_reg_222 + 2'd1);

assign j_6_fu_506_p2 = (j_1_reg_244 + 2'd1);

assign j_7_fu_648_p2 = (j_2_reg_289 + 2'd1);

assign j_8_fu_909_p2 = (j_4_reg_379 + 2'd1);

assign j_9_fu_729_p2 = (j_3_reg_311 + 2'd1);

assign m_1_fu_759_p2 = (m_reg_334 + 2'd1);

assign m_cast_fu_749_p1 = m_reg_334;

assign n_1_fu_824_p2 = (n_reg_357 + 2'd1);

assign n_cast_fu_814_p1 = n_reg_357;

assign p_shl1_cast_fu_887_p1 = p_shl1_fu_879_p3;

assign p_shl1_fu_879_p3 = {{i_4_reg_368}, {2'd0}};

assign p_shl2_cast_fu_430_p1 = tmp_s_fu_422_p3;

assign p_shl3_cast_fu_490_p1 = tmp_4_fu_482_p3;

assign p_shl4_cast_fu_544_p1 = tmp_fu_536_p3;

assign p_shl5_cast_fu_632_p1 = tmp_22_fu_624_p3;

assign p_shl6_cast_fu_610_p1 = tmp_13_fu_602_p3;

assign p_shl7_cast_fu_804_p1 = tmp_34_fu_796_p3;

assign p_shl8_cast_fu_782_p1 = tmp_32_fu_774_p3;

assign p_shl_cast_fu_709_p1 = p_shl_fu_701_p3;

assign p_shl_fu_701_p3 = {{i_3_reg_300}, {2'd0}};

assign p_sum1_cast_fu_744_p1 = $signed(p_sum1_fu_739_p2);

assign p_sum1_fu_739_p2 = (tmp_10_reg_1052 + tmp_16_cast_fu_735_p1);

assign p_sum_cast_fu_924_p1 = $signed(p_sum_fu_919_p2);

assign p_sum_fu_919_p2 = (tmp_14_reg_1139 + tmp_18_cast_fu_915_p1);

assign tmp_10_fu_713_p2 = (p_shl_cast_fu_709_p1 - tmp_9_cast7_fu_697_p1);

assign tmp_11_cast_fu_654_p1 = j_2_reg_289;

assign tmp_11_fu_564_p2 = (tmp_7_reg_987 + tmp_7_cast_fu_560_p1);

assign tmp_12_cast_fu_668_p1 = j_7_fu_648_p2;

assign tmp_12_fu_516_p2 = (tmp_5_reg_969 + tmp_cast_17_fu_512_p1);

assign tmp_13_cast2_fu_875_p1 = i_4_reg_368;

assign tmp_13_fu_602_p3 = {{i_2_reg_278}, {2'd0}};

assign tmp_14_fu_891_p2 = (p_shl1_cast_fu_887_p1 - tmp_13_cast2_fu_875_p1);

assign tmp_15_fu_897_p2 = ((i_4_reg_368 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_16_cast_fu_735_p1 = j_3_reg_311;

assign tmp_18_cast_fu_915_p1 = j_4_reg_379;

assign tmp_19_fu_929_p2 = ((j_4_reg_379 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_1_cast_fu_478_p1 = i_1_reg_233;

assign tmp_1_fu_434_p2 = (p_shl2_cast_fu_430_p1 - tmp_cast_fu_418_p1);

assign tmp_20_fu_765_p2 = (m_cast_fu_749_p1 + i_3_cast_reg_1039);

assign tmp_21_cast_fu_770_p1 = tmp_20_fu_765_p2;

assign tmp_21_fu_614_p2 = (p_shl6_cast_fu_610_p1 - tmp_3_cast_fu_598_p1);

assign tmp_22_cast_fu_792_p1 = m_reg_334;

assign tmp_22_fu_624_p3 = {{i_7_fu_592_p2}, {2'd0}};

assign tmp_24_fu_830_p2 = (n_cast_fu_814_p1 + j_3_cast_reg_1057);

assign tmp_25_cast_fu_835_p1 = tmp_24_fu_830_p2;

assign tmp_25_fu_636_p2 = (tmp_5_cast_fu_620_p1 + p_shl5_cast_fu_632_p1);

assign tmp_26_cast_fu_849_p1 = n_reg_357;

assign tmp_26_fu_658_p2 = (tmp_21_reg_1011 + tmp_11_cast_fu_654_p1);

assign tmp_2_fu_580_p2 = ((invdar_reg_255 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_31_fu_672_p2 = (tmp_25_reg_1016 + tmp_12_cast_fu_668_p1);

assign tmp_32_fu_774_p3 = {{tmp_20_fu_765_p2}, {2'd0}};

assign tmp_33_fu_786_p2 = (tmp_21_cast_fu_770_p1 + p_shl8_cast_fu_782_p1);

assign tmp_34_fu_796_p3 = {{m_reg_334}, {2'd0}};

assign tmp_35_cast_fu_461_p1 = $signed(tmp_6_fu_456_p2);

assign tmp_35_fu_808_p2 = (p_shl7_cast_fu_804_p1 - tmp_22_cast_fu_792_p1);

assign tmp_36_fu_839_p2 = (tmp_33_reg_1083 + tmp_25_cast_fu_835_p1);

assign tmp_37_fu_853_p2 = (tmp_35_reg_1088 + tmp_26_cast_fu_849_p1);

assign tmp_38_cast_fu_569_p1 = tmp_11_fu_564_p2;

assign tmp_39_cast_fu_521_p1 = $signed(tmp_12_fu_516_p2);

assign tmp_3_cast_fu_598_p1 = i_2_reg_278;

assign tmp_44_cast_fu_663_p1 = $signed(tmp_26_fu_658_p2);

assign tmp_45_cast_fu_677_p1 = tmp_31_reg_1034;

assign tmp_4_cast_fu_452_p1 = j_reg_222;

assign tmp_4_fu_482_p3 = {{i_1_reg_233}, {2'd0}};

assign tmp_50_cast_fu_844_p1 = tmp_36_fu_839_p2;

assign tmp_51_cast_fu_858_p1 = $signed(tmp_37_fu_853_p2);

assign tmp_5_cast_fu_620_p1 = i_7_fu_592_p2;

assign tmp_5_fu_494_p2 = (p_shl3_cast_fu_490_p1 - tmp_1_cast_fu_478_p1);

assign tmp_6_cast_fu_532_p1 = invdar_reg_255;

assign tmp_6_fu_456_p2 = (tmp_1_reg_948 + tmp_4_cast_fu_452_p1);

assign tmp_7_cast_fu_560_p1 = invdar1_reg_267;

assign tmp_7_fu_548_p2 = (p_shl4_cast_fu_544_p1 + tmp_6_cast_fu_532_p1);

assign tmp_8_fu_574_p2 = ((invdar1_reg_267 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_9_cast7_fu_697_p1 = i_3_reg_300;

assign tmp_cast_17_fu_512_p1 = j_1_reg_244;

assign tmp_cast_fu_418_p1 = i_reg_211;

assign tmp_fu_536_p3 = {{invdar_reg_255}, {2'd0}};

assign tmp_last_V_fu_935_p2 = (tmp_19_fu_929_p2 & tmp_15_reg_1144);

assign tmp_s_fu_422_p3 = {{i_reg_211}, {2'd0}};

always @ (posedge ap_clk) begin
    i_3_cast_reg_1039[2] <= 1'b0;
    j_3_cast_reg_1057[2] <= 1'b0;
end

endmodule //Conv
